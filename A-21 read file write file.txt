#with open():
-  is used to open files in Python. It provides easy resource management, automatic file closing after operations, and error handling.
-  with open(file_path, mode, encoding) as file_variable:

#Modes:
 - 'r': --> Read mode - opens the file for reading. Throws an exception if the file doesn't exist.
 - 'w': --> Write mode - opens the file for writing. If the file exists, it clears its previous content. If not, it creates a new file.
 - 'a': --> Append mode - opens the file for appending. New content is added at the end without removing the existing content. 
            If the file doesn't exist, it creates a new one.
 -'r+': --> Read and write mode - opens the file for both reading and writing. Throws an exception if the file doesn't exist.

#Example of using read mode:
with open('file.txt', 'r') as file:
    content = file.read()
    print(content)

#Example of using write mode:
with open('file.txt', 'w') as file:
    file.write('New file content')
        
        
#METHODS
 - read()     --> This method is used to read the content of the file. It reads the entire content of the file and returns it as a single string.
                  - After reading the entire content, the file pointer is positioned at the end of the file. 
                  - Subsequent read() calls won't return anything as the file pointer is already at the end.
                  - If no argument is provided, read() reads the entire file. If an argument is given, read() reads only the specified number of bytes.

- readlines() --> This method reads the content of the file as a list of lines keeping the newline '\n' characters at the end of each line except the last one.

- readline()  --> This method is used to read a single line from the file. 
                  - When you call file.readline(), Python reads the next line from the file and returns it as a single string.

- write()     --> Is used to write data to the file. 
                  - When you call it, it writes the provided data to the file at the position of the current file pointer.

- seek(offset, whence) --> This method is used to set the file pointer's position to a specific offset. 
                           The offset is specified in bytes from the beginning of the file.
                       - offset: The number of bytes by which to move the file pointer. It can be a positive or negative integer.
                       - whence: Parameter specifying the reference point for the offset. The default value of whence is 0, indicating the beginning of the file.
                                 Other possible values for whence are 1 (current file position) and 2 (end of the file).

- tell()      -->  returns the current position of the file pointer in bytes from the beginning of the file.
